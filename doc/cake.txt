*cake.txt*  Utility for CakePHP developpers.

Version: 2.11.1
Author: Yuhei Kagaya <yuhei.kagaya@gmail.com>
Repository: https://github.com/violetyk/cake.vim
License: This file is placed in the public domain.


==============================================================================
CONTENTS						*cake-contents*

Introduction		|cake-introduction|
Install			|cake-install|
Interface		|cake-interface|
  Commands		  |cake-commands|
    Specifying the App	    |cake-specifying-app|
    Jump to Model	    |cake-jump-to-model|
    Jump to Controller	    |cake-jump-to-controller|
    Jump to View	    |cake-jump-to-view|
    Jump to Config	    |cake-jump-to-config|
    Jump to Component	    |cake-jump-to-component|
    Jump to Behavior	    |cake-jump-to-behavior|
    Jump to Helper	    |cake-jump-to-helper|
    Jump to Shell	    |cake-jump-to-shell|
    Jump to Task	    |cake-jump-to-task|
    Jump to Test	    |cake-jump-to-test|
    Jump to Fixture	    |cake-jump-to-fixture|
    Jump to Core Library    |cake-jump-to-core|
    Jump to 1st party Library |cake-jump-to-lib|
    Jump by the Context     |cake-gf|
    Open Log		    |cake-open-log|
    Cut to Element	    |cake-cut-to-element|
    Get Table Structure	    |cake-describe-table|
    Run bake		    |cake-run-bake|
    Run test case	    |cake-run-testcase|
  Variables		  |cake-variables|
    Build Path		    |cake-buildpath|
Bugs			|cake-bugs|
Changelog		|cake-changelog|


==============================================================================
INTRODUCTION						*cake-introduction*

cake.vim is for easy jumping between Controller, Model and View files 
when developing in CakePHP.

Requirements:
- Vim ver.7.3 or heigher
- CakePHP ver.1.3.x or ver.2.x


==============================================================================
INSTALL							*cake-install*

1: Extract the file and Put files in your Vim directory
   (usually ~/.vim/).
2: Execute |:Cakephp| <Space> /path/to/cakephp_app/ command or in your .vimrc.
>
    let g:cakephp_enable_fix_mode = 1
    let g:cakephp_app = "/path/to/cakephp_app/"
<

When you find a project from open file automatically,
please set it as follows.
>
    let g:cakephp_enable_auto_mode = 1
<

And if you would like to use divided view themed such as "front" and "admin",
let g:cakephp_use_theme = "admin"
add the comment in your .vimrc.


MySQL and Apache logs to see the log quickly, and write the following.
>
    let g:cakephp_log = {
          \ 'query' : '/var/log/mysqld-query.log',
          \ 'access': '/usr/local/apache2/logs/access_log'
          \ }
<

Sorry, this plugin will not work well for windows at this time.


More comfortable to use cake.vim, if you write key-mappings in your .vimrc. 
Here is recommended key-mappings.
>
    " Recommended  key-mappings.
    nnoremap <Space>cc :Ccontroller 
    nnoremap <Space>cm :Cmodel 
    nnoremap <Space>cv :Cview 
    nnoremap <Space>cl :Clog 
<


==============================================================================
INTERFACE						*cake-interface*

------------------------------------------------------------------------------
COMMANDS						*cake-commands*

{model-name},{view-name},{controller-name},{theme-name},{shell-name},{task-name},
{config-name},{component-name}, {log-name} is entered, you can complete with <TAB>.


SPECIFYING THE APP ~
							*cake-specifying-app*
							*g:cakephp_enable_fix_mode*
							*g:cakephp_app*
							*g:cakephp_use_theme*
							*g:cakephp_enable_auto_mode*
:Cakephp {cakephp-app}					*:Cakephp*
		At the first, specified the app directory of your CakePHP.
		When you run this command, it will be cached controller and
		model name internally.
		If you write the following key-mappings in your .vimrc, it will
		perform automatically at startup.

>
    let g:cakephp_enable_fix_mode = 1
    let g:cakephp_app = "/path/to/cakephp_app/"
<

		When you find a project from open file automatically,
		please set it as follows.
>
    let g:cakephp_enable_auto_mode = 1
<

JUMP TO MODEL ~
							*cake-jump-to-model*
:Cmodel [{model-name}]					*:Cmodel*
:Cmodelsp [{model-name}]				*:Cmodelsp*
:Cmodelvsp [{model-name}]				*:Cmodelvsp*
:Cmodeltab [{model-name}]				*:Cmodeltab*
		Edit the specified or guess the model when current buffer is
		controller.
		If you do not specify {model-name} deduced from the open files.
		Also you can make a new file if there is no file.
		You can split editing using |:Cmodelsp|.
		You can split editing vertically using |:Cmodelvsp|.
		You can open new tab editing, using |:Cmodeltab|.


JUMP TO CONTROLLER ~
						*cake-jump-to-controller*
:Ccontroller [{controller-name}]			*:Ccontroller*
:Ccontrollersp [{controller-name}]			*:Ccontrollersp*
:Ccontrollervsp [{controller-name}]			*:Ccontrollervsp*
:Ccontrollertab [{controller-name}]			*:Ccontrollertab*
		Edit the specified or current controller when current buffer is
		model.
		Also you can make a new file if there is no file.
		You can split editing using |:Ccontrollersp|.
		You can split editing vertically using |:Ccontrollervsp|.
		You can open new tab editing, using |:Ccontrollertab|.


JUMP TO VIEW ~
							*cake-jump-to-view*
:Cview [{view-name}] [{theme-name}]			*:Cview*
:Cviewsp [{view-name}] [{theme-name}]			*:Cviewsp*
:Cviewvsp [{view-name}] [{theme-name}]			*:Cviewvsp*
:Cviewtab [{view-name}] [{theme-name}]			*:Cviewtab* 
		Edit the specified or current function's view.

		{theme-name} is option.
		When you always use the admin theme, it is not necessary to
		appoint it if you write it to your .vimrc as follow
>
    let g:cakephp_use_theme = "admin"
<
		Also you can make a new file if there is no file.
		You can split editing using |:Cviewsp|.
		You can split editing vertically using |:Cviewvsp|.
		You can open new tab editing, using |:Cviewtab|.


							*:Ccontrollerview*
							*:Ccontrollerviewsp*
							*:Ccontrollerviewvsp*
							*:Ccontrollerviewtab*
:Ccontrollerview {controller-name} {view-name} [{theme-name}]
:Ccontrollerviewsp {controller-name} {view-name}] [{theme-name}]
:Ccontrollerviewvsp {controller-name} {view-name} [{theme-name}]
:Ccontrollerviewtab {controller-name} {view-name}] [{theme-name}]
		Open the view file with the view name and controller name.


JUMP TO CONFIG ~
							*cake-jump-to-config*
:Cconfig {config-name}					*:Cconfig*
:Cconfigsp {config-name}				*:Cconfigsp*
:Cconfigvsp {config-name}				*:Cconfigvsp*
:Cconfigtab {config-name}				*:Cconfigtab*
		Edit the specified config file.
		Also you can make a new file if there is no file.
		You can split editing using |:Cconfigsp|.
		You can split editing vertically using |:Cconfigvsp|.
		You can open new tab editing, using |:Cconfigtab|.


JUMP TO COMPONENT ~
						*cake-jump-to-component*
:Ccomponent [{component-name}]				*:Ccomponent*
:Ccomponentsp [{component-name}]			*:Ccomponentsp*
:Ccomponentvsp [{component-name}]			*:Ccomponentvsp*
:Ccomponenttab [{component-name}]			*:Ccomponenttab*
		Edit the specified component file.
		Also you can make a new file if there is no file.
		You can split editing using |:Ccomponentsp|.
		You can split editing vertically using |:Ccomponentvsp|.
		You can open new tab editing, using |:Ccomponenttab|.


JUMP TO BEHAVIOR ~
						*cake-jump-to-behavior*
:Cbehavior [{behavior-name}]				*:Cbehavior*
:Cbehaviorsp [{behavior-name}]				*:Cbehaviorsp*
:Cbehaviorvsp [{behavior-name}]				*:Cbehaviorvsp*
:Cbehaviortab [{behavior-name}]				*:Cbehaviortab*
		Edit the specified behavior file.
		Also you can make a new file if there is no file.
		You can split editing using |:Cbehaviorsp|.
		You can split editing vertically using |:Cbehaviorvsp|.
		You can open new tab editing, using |:Cbehaviortab|.


JUMP TO HELPER ~
							*cake-jump-to-helper*
:Chelper [{helper-name}]				*:Chelper*
:Chelpersp [{helper-name}]				*:Chelpersp*
:Chelpervsp [{helper-name}]				*:Chelpervsp*
:Chelpertab [{helper-name}]				*:Chelpertab*
		Edit the specified helper file.
		Also you can make a new file if there is no file.
		You can split editing using |:Chelpersp|.
		You can split editing vertically using |:Chelpervsp|.
		You can open new tab editing, using |:Chelpertab|.


JUMP TO SHELL ~
							*cake-jump-to-shell*
:Cshell {shell-name}					*:Cshell*
:Cshellsp {shell-name}					*:Cshellsp*
:Cshellvsp {shell-name}					*:Cshellvsp*
:Cshelltab {shell-name}					*:Cshelltab*
		Edit the specified shell file.
		Also you can make a new file if there is no file.
		You can split editing using |:Cshellsp|.
		You can split editing vertically using |:Cshellvsp|.
		You can open new tab editing, using |:Cshelltab|.


JUMP TO TASK ~
							*cake-jump-to-task*
:Ctask {task-name}					*:Ctask*
:Ctasksp {task-name}					*:Ctasksp*
:Ctaskvsp {task-name}					*:Ctaskvsp*
:Ctasktab {task-name}					*:Ctasktab*
		Edit the specified task file.
		Also you can make a new file if there is no file.
		You can split editing using |:Ctasksp|.
		You can split editing vertically using |:Ctaskvsp|.
		You can open new tab editing, using |:Ctasktab|.


JUMP TO TEST ~
							*cake-jump-to-test*
:Ctestmodel [{testmodel-name}]				*:Ctestmodel*
:Ctestmodelsp [{testmodel-name}]			*:Ctestmodelsp*
:Ctestmodelvsp [{testmodel-name}]			*:Ctestmodelvsp*
:Ctestmodeltab [{testmodel-name}]			*:Ctestmodeltab*
		Edit the specified or guess the testmodel when current buffer is
		model or fixture.
		If you do not specify {testmodel-name} deduced from the open files.
		Also you can make a new file if there is no file.
		You can split editing using |:Ctestmodelsp|.
		You can split editing vertically using |:Ctestmodelvsp|.
		You can open new tab editing, using |:Ctestmodeltab|.

:Ctestbehavior [{testbehavior-name}]			*:Ctestbehavior*
:Ctestbehaviorsp [{testbehavior-name}]			*:Ctestbehaviorsp*
:Ctestbehaviorvsp [{testbehavior-name}]			*:Ctestbehaviorvsp*
:Ctestbehaviortab [{testbehavior-name}]			*:Ctestbehaviortab*
		Edit the specified or guess the testbehavior when current buffer is
		behavior.
		If you do not specify {testbehavior-name} deduced from the open files.
		Also you can make a new file if there is no file.
		You can split editing using |:Ctestbehaviorsp|.
		You can split editing vertically using |:Ctestbehaviorvsp|.
		You can open new tab editing, using |:Ctestbehaviortab|.

:Ctestcontroller [{testcontroller-name}]		*:Ctestcontroller*
:Ctestcontrollersp [{testcontroller-name}]		*:Ctestcontrollersp*
:Ctestcontrollervsp [{testcontroller-name}]		*:Ctestcontrollervsp*
:Ctestcontrollertab [{testcontroller-name}]		*:Ctestcontrollertab*
		Edit the specified or guess the testcontroller when current buffer is
		controller.
		If you do not specify {testcontroller-name} deduced from the open files.
		Also you can make a new file if there is no file.
		You can split editing using |:Ctestcontrollersp|.
		You can split editing vertically using |:Ctestcontrollervsp|.
		You can open new tab editing, using |:Ctestcontrollertab|.

:Ctestcomponent [{testcomponent-name}]			*:Ctestcomponent*
:Ctestcomponentsp [{testcomponent-name}]		*:Ctestcomponentsp*
:Ctestcomponentvsp [{testcomponent-name}]		*:Ctestcomponentvsp*
:Ctestcomponenttab [{testcomponent-name}]		*:Ctestcomponenttab*
		Edit the specified or guess the testcomponent when current buffer is
		component.
		If you do not specify {testcomponent-name} deduced from the open files.
		Also you can make a new file if there is no file.
		You can split editing using |:Ctestcomponentsp|.
		You can split editing vertically using |:Ctestcomponentvsp|.
		You can open new tab editing, using |:Ctestcomponenttab|.

:Ctesthelper [{testhelper-name}]			*:Ctesthelper*
:Ctesthelpersp [{testhelper-name}]			*:Ctesthelpersp*
:Ctesthelpervsp [{testhelper-name}]			*:Ctesthelpervsp*
:Ctesthelpertab [{testhelper-name}]			*:Ctesthelpertab*
		Edit the specified or guess the testhelper when current buffer is
		helper.
		If you do not specify {testhelper-name} deduced from the open files.
		Also you can make a new file if there is no file.
		You can split editing using |:Ctesthelpersp|.
		You can split editing vertically using |:Ctesthelpervsp|.
		You can open new tab editing, using |:Ctesthelpertab|.

:Ctest							*:Ctest*
:Ctestsp						*:Ctestsp*
:Ctestvsp						*:Ctestvsp*
:Ctesttab						*:Ctesttab*
		Edit the test case file of the file which you open in a current buffer now.
		Supports Model, Behavior, Component, Controller, Helper.

JUMP TO FIXTURE ~
							*cake-jump-to-fixture*
:Cfixture [{fixture-name}]				*:Cfixture*
:Cfixturesp [{fixture-name}]				*:Cfixturesp*
:Cfixturevsp [{fixture-name}]				*:Cfixturevsp*
:Cfixturetab [{fixture-name}]				*:Cfixturetab*
		Edit the specified or guess the fixture when current buffer is
		model.
		Also you can make a new file if there is no file.
		You can split editing using |:Cfixturesp|.
		You can split editing vertically using |:Cfixturevsp|.
		You can open new tab editing, using |:Cfixturetab|.


JUMP TO CORE LIBRARY ~
							*cake-jump-to-core*
							*g:cakephp_core_path*
:Ccore {core-name}					*:Ccore*
:Ccoresp {core-name}					*:Ccoresp*
:Ccorevsp {core-name}					*:Ccorevsp*
:Ccoretab {core-name}					*:Ccoretab*
		Edit the CakePHP's Core coreraries.
		You can split editing using |:Ccoresp|.
		You can split editing vertically using |:Ccorevsp|.
		You can open new tab editing, using |:Ccoretab|.

		A default is a library in the directories same as app directory.
		The cases that moved a library of CakePHP please set a path.
>
    let g:cakephp_core_path  = '/path/to/cakephp_core/'
<


JUMP TO 1ST PARTY LIBRARY ~
							*cake-jump-to-lib*
:Clib {lib-name}					*:Clib*
:Clibsp {lib-name}					*:Clibsp*
:Clibvsp {lib-name}					*:Clibvsp*
:Clibtab {lib-name}					*:Clibtab*
		Edit the 1st party libraries.
		You can split editing using |:Clibsp|.
		You can split editing vertically using |:Clibvsp|.
		You can open new tab editing, using |:Clibtab|.


JUMP BY THE CONTEXT ~
		In Vim, you press the gf in normal mode, open the path 
		it is written under the cursor, but, gf in a project in CakePHP 
		to open the file of the object.
		<C-w>f is horizontal split, <C-w>gf is open in a tab,
		and gs is vertical split.
		If you want to change "gs" key bindings, you can set the
		|g:cakephp_keybind_vsplit_gf|.

OPEN THE LOG ~
						*cake-open-log*
						*g:cakephp_log*
						*g:cakephp_log_window_size*
:Clog [{log-name}]				*:Clog*
		Open up the log that I appointed like "tail -f" command quickly.
		MySQL and Apache logs to see the log quickly,
		and write the following.
>
    let g:cakephp_log = {
        \ 'query' : '/var/log/mysqld-query.log',
        \ 'access': '/usr/local/apache2/logs/access_log'
        \ }
<
		If you want to change the height of the window,
		please set the |g:cakephp_log_window_size| .

CUT TO ELEMENT ~
							*cake-cut-to-element*
:[range]Celement[!] [{element-namee}] [{theme-name})]		*:Celement*
		Begin to write a chosen range as a element file.

		{theme-name} is option.
		When you appoint it explicitly, make a Element file
		under the specific Theme's directory.
		The default is the current Theme's directory
		which an opening View file belongs to now.


GET TABLE STRUCTURE ~
						*cake-describe-table*
						*g:cakephp_db_type*
						*g:cakephp_db_port*
						*g:cakephp_db_buffer_lines*
:Cdesc [{model-name}]				*:Cdesc*
		If dbext.vim is installed, Describe table.
		If you do not specify {model-name} deduced from <cword>.
		PHP version 5 or more are necessary.

		To get the connection information is automatic.
		Default is MySQL.
		Please set the parameters if you want to change.
		|g:cakephp_db_type|  default value is 'MySQL'.
		|g:cakephp_db_port|  default value is 3306.

		If you want to change the height of the window,
		please set the |g:cakephp_db_buffer_lines| .


RUN BAKE ~
							*cake-run-bake*
:Cbake [{target}] [{test-target}]			*:Cbake*
		Run bake command.

RUN TEST CASE ~
							*cake-run-testcase*
:Ctestrun						*:Ctestrun*
		Run test case command, guess depending on the type of the
		current buffer.

------------------------------------------------------------------------------
VARIABLES						*cake-variables*

							*cake-buildpath*
							*g:cakephp_app_config_file*
		Create a file named ".cake" directly under the application
		directory, if you add the build path in JSON format, as follows:
		You can also jump to the class to which it is added.
>
  {
    "build_path": {
      "models": [
        "/full/path/to/models/",
        "/next/full/path/to/models/"
      ],
      "components": [
        "/full/path/to/components/",
        "/next/full/path/to/components/"
      ],
      "helpers": [
        "/full/path/to/helpers/",
        "/next/full/path/to/helpers/"
      ]
    },
  }
<


		If there is a CakePHP core directory to a different location
		for each your application, it is useful without the
		|g:cakephp_core_path|, and I write on ".cake" as follows.
>
  {
    "build_path": {
      "models": [
        "/full/path/to/models/",
        "/next/full/path/to/models/"
      ],
      "components": [
        "/full/path/to/components/",
        "/next/full/path/to/components/"
      ],
      "helpers": [
        "/full/path/to/helpers/",
        "/next/full/path/to/helpers/"
      ]
    },
    "cake" : "/path/to/another_cakephp_core/"
  }
<


		Please set if you want to change the ".cake" is the default
		name of the configuration file, such as the following.
>
  let g:cakephp_app_config_file = '.project'
<

g:cakephp_no_default_keymappings           *g:cakephp_no_default_keymappings*

		This plugin will define the following key mappings in Normal
		mode automatically. If you don't want these key mappings,
		define |g:cakephp_no_default_keymappings| before this plugin
		is loaded (e.g. in your |vimrc|).

		{lhs}	{rhs}
		------	---------------------------
		gf	<Plug>CakeJump
		gs	<Plug>CakeVSplitJump
		<C-w>f	<Plug>CakeSplitJump
		<C-w>gf	<Plug>CakeTabJump


		If you want to customize the key mapping, please use the
		|PluginCakephpInitializeAfter| event with autocmd statement.
		For example, the following code assign |<Plug>CakeJump| to
		"gf".

>
	function! s:init_cakephp()
		nmap <buffer> gf <Plug>CakeJump
	endfunction
	autocmd my-vimrc User PluginCakephpInitializeAfter call s:init_cakephp()
<

g:cakephp_gf_fallback_n                    *g:cakephp_gf_fallback_n*

		If there is no cakephp file when <Plug>CakeJump is called,
		|g:cakephp_gf_fallback_n| will be executed by |execute|.
		(Default: "normal! gf")

g:cakephp_gf_fallback_s                    *g:cakephp_gf_fallback_s*

		If there is no cakephp file when <Plug>CakeSplitJump is called,
		|g:cakephp_gf_fallback_s| will be executed by |execute|.
		(Default: "normal! \<C-w>f")

g:cakephp_gf_fallback_t                    *g:cakephp_gf_fallback_t*

		If there is no cakephp file when <Plug>CakeTabJump is called,
		|g:cakephp_gf_fallback_t| will be executed by |execute|.
		(Default: "normal! \<C-w>gf")


==============================================================================
BUGS								*cake-bugs*

    I want to register the issue on github.
    Repository: https://github.com/violetyk/cake.vim

    Welcome your feedback.


==============================================================================
CHANGE LOG							*cake-changelog*

2.12
     - Change from |:Clib| to |:Ccore| the name of command
     - Change from cake_lib to cake_core the name of unite source name
     - Add the feature to jump to the 1st party libraries
       |:Clib|
       Unite cake_lib

2.11.1 2013-05-24
     - Avoid error when g:cake is not initialized.
     - Fix bug.

2.11   2013-05-10
     - Add |:Cbake|
     - Add |:Ctestrun|
     - Add g:cakephp_enable_abbreviations
     - Add unite-source cake_lib
     - Fix a few bugs.

2.10.1 2013-03-06
     - Add to the configuration file : core
     - Fix a few bugs.

2.10   2013-01-08
     - |:Cview|, To guess the name of the view from the current position if the
       argument is omitted.
     - Improve boot speed.

2.9.1   2012-12-02
     - Add a new vertical split in gs command like gf.

2.9.0   2012-11-10
     - Add feature to jump to the build path configuration file written.

2.8.3   2012-11-05
     - Change the priority which jumped by gf command.

2.8.2   2012-10-23
     - Fix a few bugs.

2.8.1   2012-08-13
     - Fix a few bugs.

2.8.0   2012-07-16
     - Add New gf pattern.
       "array('controller' => 'Hoge', 'action' => 'fuga') " jump to 
       "HogeController::fuga()" .
       "array('controller' => 'Hoge', 'action' => 'fuga', 'admin' => true)" jump to 
       "HogeController::admin_fuga()" .
     - Fix a few bugs.


2.7.0   2012-06-17
     - |:Cdesc| performed setting of the database connection automatically.
       It look up $useDbConfig, $useTable, and database.php .

2.6.0   2012-05-26
     - Add Command.
       |:Cdesc|
       Describe table structure of the model by calling dbext.vim internally.

2.5.0   2012-05-17
     - Update gf algorithm. Searched for view files, script files, CSS files recursively.
     - Fix a few bugs.

2.4.1   2012-04-21
     - When an object was not found by gf command, I did the gf command of the default.
     - Fix a few bugs.

2.4.0   2012-04-08
     - Add Commands.
       |:Clib|
       |:Clibsp|
       |:Clibvsp|
       |:Clibtab|
     - Add New gf algorithm that could jump to a core of CakePHP.
     - Improved Auto Mode.
       At the time of auto_mode, it prevented you from losing sight of a path of app
       when you opened the file except CakePHP once.

2.3.2   2012-03-12
     - Add New gf algorithm.
     - in Controller, "class HogesController extends AppController" -> AppController
     - in Model, "class Hoge extends AppModel"  -> AppModel

2.3.1   2012-02-11
     - Fix a few bugs.

2.3.0   2012-02-04
     - Add Commands.
       |:Celement|

2.2.0   2012-01-21
     - Add the mode which automatically set a project.
       (g:cakephp_enable_auto_mode)
     - Add g:cakephp_enable_fix_mode
     - Deprecated g:cakephp_auto_set_project

2.1.1   2011-12-17
     - Fix a few bugs.

2.1.0   2011-12-15
     - Fix a few bugs.
     - Add gf algorithm.
     - Open the plural files at a time.

2.0.1   2011-12-02
     - Fix a few bugs.

2.0.0   2011-12-01
     - Support CakePHP 2.0.

1.4.0   2011-11-04
     - Add unite-sources.
       :Unite cake_controller
       :Unite cake_model
       :Unite cake_view
       :Unite cake_behavior
       :Unite cake_helper
       :Unite cake_component
       :Unite cake_fixture
       :Unite cake_config
       :Unite cake_shell
       :Unite cake_task

1.3.0   2011-11-03
     - Fix a few bugs.
     - Add Commands.
       |:Cbehavior|
       |:Cbehaviorsp|
       |:Cbehaviorvsp|
       |:Cbehaviortab|
       |:Chelper|
       |:Chelpersp|
       |:Chelpervsp|
       |:Chelpertab|
       |:Ctestmodel|
       |:Ctestmodelsp|
       |:Ctestmodelvsp|
       |:Ctestmodeltab|
       |:Ctestbehavior|
       |:Ctestbehaviorsp|
       |:Ctestbehaviorvsp|
       |:Ctestbehaviortab|
       |:Ctestcontroller|
       |:Ctestcontrollersp|
       |:Ctestcontrollervsp|
       |:Ctestcontrollertab|
       |:Ctestcomponent|
       |:Ctestcomponentsp|
       |:Ctestcomponentvsp|
       |:Ctestcomponenttab|
       |:Ctesthelper|
       |:Ctesthelpersp|
       |:Ctesthelpervsp|
       |:Ctesthelpertab|
       |:Ctest|
       |:Ctestsp|
       |:Ctestvsp|
       |:Ctesttab|
       |:Cfixture|
       |:Cfixturesp|
       |:Cfixturevsp|
       |:Cfixturetab|

1.2.0   2011-06-07
     - Fix a few bugs.
     - g:cakephp_root was removed. g:cakephp_app was added instead. 
       Thanks to Valentina Rossi.
     - Add Commands, thanks to Valentina Rossi.
       |:Ccontrollerview|
       |:Ccontrollerviewsp|
       |:Ccontrollerviewvsp|
       |:Ccontrollerviewtab|
       |:Config|
       |:Configsp|
       |:Configvsp|
       |:Configtab|
       |:Ccomponent|
       |:Ccomponentsp|
       |:Ccomponentvsp|
       |:Ccomponenttab|
       |:Cshell|
       |:Cshellsp|
       |:Cshellvsp|
       |:Cshelltab|
       |:Ctask|
       |:Ctasksp|
       |:Ctaskvsp|
       |:Ctasktab|
       |:Clog|

1.1.0   2011-05-09
     - Add Commands, thanks to Kenichi Kimura.
       |:Cmodeltab|
       |:Cviewtab|
       |:Ccontrollertab|

1.0.0   2011-05-07
     - Initial version.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:noet:
